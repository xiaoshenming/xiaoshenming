# 工作流名称
name: Generate Snake

# 触发工作流的事件
on:
  # 定时任务：每天 UTC 时间午夜运行一次
  # '0 0 * * *' 的含义是：
  # 第一个 0: 分钟 (0-59)
  # 第二个 0: 小时 (0-23)
  # 第三个 *: 每月中的哪一天 (1-31)
  # 第四个 *: 每年的哪个月 (1-12)
  # 第五个 *: 每周中的哪一天 (0-6，0 和 7 都代表周日)
  schedule:
    - cron: "0 0 * * *"
  
  # 手动触发：允许你在 GitHub Actions 页面手动点击 "Run workflow" 按钮来执行
  workflow_dispatch:

# 定义工作流中的任务 (jobs)
jobs:
  build:
    # 指定运行此任务的操作系统环境
    runs-on: ubuntu-latest
    
    # 定义任务中的步骤 (steps)
    steps:
      # 步骤 1: 检出代码
      # 使用 actions/checkout@v4 来克隆你的仓库代码到 Runner 环境
      # v4 是当前推荐的稳定版本，确保了与最新 Git 和 Node.js 环境的兼容性
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 生成贪吃蛇贡献图
      # 使用 Platane/snk@v3 Action 来生成 SVG 或 GIF 图像
      # v3 是 Platane/snk Action 的最新稳定版本
      - name: Generate GitHub Contribution Snake
        uses: Platane/snk@v3
        id: snake-gif # 为此步骤设置一个 ID，如果后续步骤需要引用其输出
        with:
          # github user name (必填项): 从哪个 GitHub 用户名读取贡献图
          # 这里使用了 GitHub Actions 的上下文变量 ${{ github.repository_owner }}
          # 这样 Action 会自动获取当前仓库的所有者（即你的 GitHub 用户名），避免手动输入错误
          github_user_name: ${{ github.repository_owner }}

          # 输出文件列表: 指定要生成的文件路径和名称
          # 每行一个文件。每个输出可以通过查询字符串参数进行自定义 (例如颜色)。
          # 支持的选项包括：
          # - palette:     预设的颜色方案，如 [github (默认浅色), github-dark (暗色), github-light (浅色)]
          # - color_snake: 蛇的颜色 (十六进制代码，例如 #FF0000)
          # - color_dots:  贡献点（方块）的颜色列表，逗号分隔。
          #                  第一个颜色代表 0 贡献，然后从低到高依次填充。期望提供 5 种颜色。
          outputs: |
            # 生成默认浅色模式的 SVG 文件，用于 light 模式下的 README 显示
            dist/github-snake.svg
            # 生成暗色模式的 SVG 文件，并指定使用 'github-dark' 调色板
            # 用于 dark 模式下的 README 显示，与 <picture> 标签配合使用
            dist/github-snake-dark.svg?palette=github-dark
            # 这是一个自定义颜色的 GIF 示例，你可以根据需要启用或删除
            # color_snake 设置蛇为橙色，color_dots 定义了从低到高的五种蓝色系方块颜色
            # dist/ocean.gif?color_snake=orange&color_dots=#bfd6f6,#8dbdff,#64a1f4,#4b91f1,#3c7dd9
        env:
          # GitHub 令牌：这是一个由 GitHub Actions 自动提供的特殊令牌
          # 它允许 Actions 访问你的仓库和 GitHub API，例如读取贡献数据
          # 无需手动创建或配置，但需要确保仓库有足够的权限 (见下方提示)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 3: 部署生成的文件到 GitHub Pages 或指定分支
      # 使用 crazy-max/ghaction-github-pages@v4 Action 将生成的文件推送到 'output' 分支
      # v4 是推荐的稳定版本
      - name: Deploy to GitHub Pages branch
        uses: crazy-max/ghaction-github-pages@v4
        with:
          # 目标分支: 指定将生成的文件推送到的分支名。
          # 默认是 'gh-pages'，但在这里我们将其设置为 'output'，以便与 README.md 中的路径对应。
          target_branch: output
          # 构建目录: 指定包含要推送文件的目录。
          # 这里是 'dist' 目录，与上一步 Platane/snk Action 的输出路径一致。
          build_dir: dist
        env:
          # GitHub 令牌: 再次使用 GITHUB_TOKEN，因为它需要权限来向 'output' 分支推送文件
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
